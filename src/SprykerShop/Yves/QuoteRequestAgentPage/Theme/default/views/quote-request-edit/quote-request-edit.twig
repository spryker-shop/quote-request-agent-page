{% extends template('page-layout-quote-request', 'QuoteRequestAgentPage') %}

{% define data = {
    title: 'quote_request_page.quote_request' | trans,
    quoteRequestForm: _view.quoteRequestForm,
    quoteRequest: _view.quoteRequestForm.vars.value,
} %}

{% set quote = data.quoteRequest.latestVersion.quote %}

{% block breadcrumbs %}
    {% include molecule('breadcrumb') with {
        data: {
            steps: [
                {
                    label: 'agent.account.page_title' | trans,
                    url: path('agent/overview'),
                },
                {
                    label: 'quote_request_page.quote_request' | trans,
                    url: path('agent/quote-request')
                },
                {
                    label: '#' ~ data.quoteRequest.quoteRequestReference,
                    url: path('agent/quote-request/details', {quoteRequestReference: data.quoteRequest.quoteRequestReference})
                },
                {
                    label: 'quote_request_page.quote_request.actions.edit' | trans,
                },
            ],
        },
    } only %}
{% endblock %}

{% block content %}

    {{ form_start(data.quoteRequestForm) }}

    <div class="grid">
        <div class="col col--sm-12 col--xl-8">
            <div class="box">
                {% for child in data.quoteRequestForm.latestVersion.metadata %}
                    <div class="col col--sm-12 col--xl-6">
                        <div class="box">
                            {{ form_row(child) }}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>

        <div class="col col--sm-12 col--xl-4">
            <div class="box">
                <h6>{{ "quote_request_page.quote_request.labels.information" | trans }}</h6>
                <hr class="box__separator">
                <p>{{ 'quote_request_page.quote_request.labels.date' | trans }}:
                    <b>{{ data.quoteRequest.createdAt | formatDateTime }}</b>
                </p>
                <p>{{ 'quote_request_page.quote_request.labels.company' | trans }}:
                    <b>{{ data.quoteRequest.companyUser.company.name }}</b>
                </p>
                <p>{{ 'quote_request_page.quote_request.labels.business_unit' | trans }}:
                    <b>{{ data.quoteRequest.companyUser.companyBusinessUnit ? data.quoteRequest.companyUser.companyBusinessUnit.name : '' }}</b>
                </p>
                <p>{{ 'quote_request_page.quote_request.labels.customer' | trans }}:
                    <b>{{ data.quoteRequest.companyUser.customer.firstName }} {{ data.quoteRequest.companyUser.customer.lastName }}</b>
                </p>
                <p>{{ 'quote_request_page.quote_request.labels.status' | trans }}:
                    <span class="request-status request-status--{{ data.quoteRequest.status }}">{{ ('quote_request.status.' ~ data.quoteRequest.status) | trans }}</span>
                </p>
                <p>{{ 'quote_request_page.quote_request.labels.valid_till' | trans }}:
                    {{ form_row(data.quoteRequestForm.validUntil) }}
                </p>
                <hr class="box__separator">
                <h6>{{ "quote_request_page.quote_request.labels.version_information" | trans }}</h6>
                <hr class="box__separator">
                <p>{{ 'quote_request_page.quote_request.labels.history' | trans }}:
                    <b>{{ data.quoteRequest.latestVersion ? data.quoteRequest.latestVersion.versionReference : null }}</b>
                </p>
                <p>
                    {{ form_row(data.quoteRequestForm.isLatestVersionVisible) }}
                </p>
            </div>
        </div>
    </div>
    <div class="grid">
        <div class="col col--sm-12 col--xl-8">
            {% if quote and quote.priceMode is not empty %}
                <div class="box">
                    {% include molecule('price-mode') with {
                        data: {
                            priceMode: quote.priceMode,
                        },
                    } only %}
                </div>
            {% endif %}
            {% widget 'QuoteConfiguredBundleWidget' args [quote] with {
                data: {
                    itemForms: data.quoteRequestForm.latestVersion.quote.items,
                },
            } only %}
                {% block bundleItem %}
                    {% embed molecule('configured-bundle', 'ConfigurableBundleWidget') ignore missing with {
                        data: {
                            bundle: bundle,
                            currencyIsoCode: data.currencyIsoCode,
                            priceMode: data.priceMode,
                            isEditable: false,
                        },
                        embed: {
                            itemForms: data.itemForms,
                        },
                    } only %}
                        {% block bundleProductItem %}
                            {% embed molecule('configured-bundle-product', 'ConfigurableBundleWidget') ignore missing with {
                                data: {
                                    product: item,
                                    currencyIsoCode: data.currencyIsoCode,
                                    priceMode: data.priceMode,
                                },
                                embed: {
                                    itemForms: embed.itemForms,
                                },
                            } only %}
                                {% block quantityCol %}
                                    <div class="{{ config.name }}__col col col--sm-4 col--lg-3">
                                        {% block quantity %}
                                            {{ parent() }}

                                            {% for itemForm in embed.itemForms if data.product.groupKey == itemForm.vars.value.groupKey %}
                                                {% set unitSourcePrice = itemForm.sourceUnitGrossPrice is defined ? itemForm.sourceUnitGrossPrice.vars.value : null %}
                                                {% set unitSourcePrice = itemForm.sourceUnitNetPrice is defined ? itemForm.sourceUnitNetPrice.vars.value : unitSourcePrice %}

                                                {% include molecule('source-price-form', 'QuoteRequestAgentPage') with {
                                                    data: {
                                                        priceFiled: itemForm,
                                                        checkboxName: 'use_default_price',
                                                        checkboxValue: 1,
                                                        isChecked: unitSourcePrice == null,
                                                        checkboxLabel: 'quote_request_page.quote_request.use_default_price' | trans,
                                                    },
                                                    attributes: {
                                                        price: unitSourcePrice,
                                                    },
                                                } only %}
                                            {% endfor %}

                                        {% endblock %}
                                    </div>
                                {% endblock %}
                            {% endembed %}
                        {% endblock %}
                    {% endembed %}
                {% endblock %}
            {% endwidget %}

            {% set cartItems = data.quoteRequestForm.latestVersion.quote.items | filter(item => item.vars.value.configuredBundleItem is not defined or item.vars.value.configuredBundleItem is empty) %}
            {% for itemChild in cartItems %}
                {% set cartItem = itemChild.vars.value %}
                {% embed molecule('product-cart-item', 'CartPage') ignore missing with {
                    data: {
                        product: cartItem,
                    },
                    embed: {
                        priceMode: quote.priceMode,
                        currency: quote.currency,
                        itemChild: itemChild,
                    },
                } only %}
                    {% block additionalInformation %}
                        {% include molecule('quote-request-item-summary', 'QuoteRequestPage') ignore missing with {
                            data: {
                                priceMode: embed.priceMode,
                                unitPrice: data.product.unitPrice | money(true, embed.currency.code),
                                subtotalPrice: data.product.sumSubtotalAggregation | money(true, embed.currency.code),
                                cartItem: data.product,
                                currency: embed.currency,
                            },
                        } only %}
                    {% endblock %}

                    {% block actions %}
                        {% if data.product.amountSalesUnit is empty %}
                            {{ 'cart.item_quantity' | trans }}:
                            <strong>{{ data.product.quantity }}</strong>

                            {% if data.product.quantitySalesUnit %}
                                {% set value = data.product.quantitySalesUnit.value %}
                                {% set precision = data.product.quantitySalesUnit.precision %}
                                {% set salesUnitName = data.product.quantitySalesUnit.productMeasurementUnit.name | default('') %}

                                <p>
                                    <small class="text-secondary">
                                        [= {{ value / precision }} {{ salesUnitName | trans }}]
                                    </small>
                                </p>
                            {% endif %}
                        {% endif %}

                        {% set unitSourcePrice = embed.itemChild.sourceUnitGrossPrice is defined ? embed.itemChild.sourceUnitGrossPrice.vars.value : null %}
                        {% set unitSourcePrice = embed.itemChild.sourceUnitNetPrice is defined ? embed.itemChild.sourceUnitNetPrice.vars.value : unitSourcePrice %}

                        {% include molecule('source-price-form', 'QuoteRequestAgentPage') with {
                            data: {
                                priceFiled: embed.itemChild,
                                checkboxName: 'use_default_price',
                                checkboxValue: 1,
                                isChecked: unitSourcePrice == null,
                                checkboxLabel: 'quote_request_page.quote_request.use_default_price' | trans,
                            },
                            attributes: {
                                price: unitSourcePrice,
                            },
                        } only %}
                    {% endblock %}
                {% endembed %}
            {% endfor %}
        </div>

        <div class="col col--sm-12 col--xl-4">
            {% if quote and quote.items is not empty %}
                <div class="box">
                    {% include molecule('quote-request-cart-summary', 'QuoteRequestPage') ignore missing with {
                        data: {
                            cart: quote,
                        },
                    } only %}
                </div>
            {% endif %}
            <div class="box">
                <a class="button button--expand button--hollow"
                   href="{{ url('agent/quote-request/details', {quoteRequestReference: data.quoteRequest.quoteRequestReference}) }}" data-init-single-click>
                    {{ 'quote_request_page.quote_request.actions.back_to_view' | trans }}
                </a>
                <hr class="box__separator">
                <a class="button button--expand button--edit-items"
                   href="{{ url('agent/quote-request/edit-items', {quoteRequestReference: data.quoteRequest.quoteRequestReference}) }}" data-init-single-click>
                    {{ 'quote_request_page.quote_request.actions.edit_items' | trans }}
                </a>
                <hr class="box__separator">
                <button type="submit" name="save" class="button button--expand button--success">
                    {{ 'quote_request_page.quote_request.actions.save' | trans }}
                </button>
                {% if data.quoteRequest.latestVersion.quote.items | length %}
                    <hr class="box__separator">
                    <button type="submit" name="sendToCustomer" class="button button--expand button--success">
                        {{ 'quote_request_page.quote_request.actions.send_to_customer' | trans }}
                    </button>
                {% endif %}
            </div>
        </div>
    </div>

    {{ form_end(data.quoteRequestForm) }}
{% endblock %}
